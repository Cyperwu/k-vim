" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   pep8, pyflake

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'markdown', 'html', 'css', 'tmux', 'beta', 'json', 'nginx', 'golang', 'ruby', 'less', 'php', 'coffeescript']
    let g:bundle_groups=['python', 'javascript', 'markdown', 'html', 'css', 'tmux', 'beta', 'coffeescript']
endif

" ----------------------------------------------------------------------------
" 使用 dein 管理插件
" dein bundle control, command model
" ----------------------------------------------------------------------------

"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=/Users/wujiajie/.vim/bundles/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('/Users/wujiajie/.vim/bundles')
  call dein#begin('/Users/wujiajie/.vim/bundles')

  " Let dein manage dein
  " Required:
  call dein#add('/Users/wujiajie/.vim/bundles/repos/github.com/Shougo/dein.vim')

  " Add or remove your plugins here:
  call dein#add('Shougo/neosnippet.vim')
  call dein#add('Shougo/neosnippet-snippets')

" unix shell 命令的vim封装
call dein#add('tpope/vim-eunuch')
call dein#add('wsdjeg/dein-ui.vim')

" jsDoc 用来写js文件的注释
 call dein#add('heavenshell/vim-jsdoc')

" typescript-vim
 call dein#add('leafgarland/typescript-vim')

" eslint
 " call dein#add('mtscout6/syntastic-local-eslint.vim')

" vim-vue
 call dein#add('posva/vim-vue')
"fzf
 " call dein#add('/usr/local/opt/fzf') |  call dein#add('junegunn/fzf.vim')
call dein#add('junegunn/fzf', { 'build': './install --all', 'merged': 0 })
call dein#add('junegunn/fzf.vim', { 'depends': 'fzf' })

" syntastic
" call dein#add('scrooloose/syntastic')

" neomake
 call dein#add('neomake/neomake')
 call dein#add('jaawerth/nrun.vim')


" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:
 call dein#add('SirVer/ultisnips')
 call dein#add('honza/vim-snippets')

" auto complete
" 代码自动补全
" 迄今为止用到的最好的自动VIM自动补全插件
" 重启 :YcmRestartServer
 call dein#add('zxqfl/tabnine-vim', {'build': './install.sh'})
 call dein#add('Shougo/deoplete.nvim')
 call dein#add('ervandew/supertab')

" neovim 自动补全
 call dein#add('othree/jspc.vim')

if !has('nvim')
  call dein#add('roxma/nvim-yarp')
  call dein#add('roxma/vim-hug-neovim-rpc')
endif

" 自动补全单引号，双引号等
 call dein#add('Raimondi/delimitMate')
" 自动补全html/xml标签
 call dein#add('docunext/closetag.vim')

" quick edit
" 快速注释
 call dein#add('scrooloose/nerdcommenter')

" 快速加入修改环绕字符
" for repeat -> enhance surround.vim, . to repeat command
 call dein#add('tpope/vim-repeat') |  call dein#add('tpope/vim-surround')
" trailingwhitespace
" 快速去行尾空格 [, + <Space>]
 call dein#add('bronson/vim-trailing-whitespace')
" easyalign
" 快速赋值语句对齐
 call dein#add('junegunn/vim-easy-align')

" quick movement
" easymotion
"更高效的移动 [,, + w/fx/h/j/k/l]
 call dein#add('Lokaltog/vim-easymotion')

" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
 call dein#add('unblevable/quick-scope')

 call dein#add('vim-scripts/matchit.zip')
" signature
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        list all marks
 call dein#add('kshenoy/vim-signature')

" quick selection and edit
" expandregion
" 选中区块
 call dein#add('terryma/vim-expand-region')
" 多光标选中编辑
" multiplecursors
 call dein#add('terryma/vim-multiple-cursors')

" quick locate file or function
" 文件搜索
" change to https://github.com/ctrlpvim/ctrlp.vim
" ctrlp ctrlpfunky
 call dein#add('ctrlpvim/ctrlp.vim') |  call dein#add('tacahiroy/ctrlp-funky')
" ctrlsf
" 类似sublimetext的搜索
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
 call dein#add('dyng/ctrlsf.vim')
" incsearch
"  call dein#add('haya14busa/incsearch.vim')

" quick run
" quickrun
call dein#add('thinca/vim-quickrun')

" git
" fugitive
call dein#add('tpope/vim-fugitive')
" gitgutter
call dein#add('airblade/vim-gitgutter')

" gundo
" edit history, 可以查看回到某个历史状态
call dein#add('sjl/gundo.vim')

" view
" airline
" 状态栏增强展示
call dein#add('vim-airline/vim-airline')
call dein#add('vim-airline/vim-airline-themes')
" rainbow_parentheses
" 括号显示增强
call dein#add('kien/rainbow_parentheses.vim')
" 主题 solarized
" solarized
call dein#add('altercation/vim-colors-solarized')
" molokai
" 主题 molokai
call dein#add('tomasr/molokai')


" nav
" nerdtree nerdtreetabs
call dein#add('scrooloose/nerdtree') | call dein#add('jistr/vim-nerdtree-tabs')
" ctrlspace
call dein#add('szw/vim-ctrlspace')
" tagbar
" call dein#add('majutsushi/tagbar')

" text object
" 支持自定义文本对象
call dein#add('kana/vim-textobj-user')
" 增加行文本对象: l   dal yal cil
call dein#add('kana/vim-textobj-line')
" 增加文件文本对象: e   dae yae cie
call dein#add('kana/vim-textobj-entire')
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
call dein#add('kana/vim-textobj-indent')

if count(g:bundle_groups, 'tmux')
    " tmux
    " For tmux navigator Ctrl-hjkl
    call dein#add('christoomey/vim-tmux-navigator')
endif

if count(g:bundle_groups, 'markdown')
    call dein#add('plasticboy/vim-markdown')
    " https://github.com/suan/vim-instant-markdown
    " npm -g install instant-markdown-d
    " call dein#add('suan/vim-instant-markdown')
    " let g:instant_markdown_slow = 1
    " let g:instant_markdown_autostart = 0
    " map <F12> :InstantMarkdownPreview<CR>
endif

if count(g:bundle_groups, 'golang')
    " 1. vim a.go
    " 2. :GoInstallBinaries
    " vimgo
    call dein#add('fatih/vim-go')
endif


if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    call dein#add('hdima/python-syntax')
    call dein#add('hynek/vim-python-pep8-indent')
    call dein#add('Glench/Vim-Jinja2-Syntax')
endif

if count(g:bundle_groups, 'php')
    call dein#add('spf13/PIV')
endif

if count(g:bundle_groups, 'ruby')
    call dein#add('vim-ruby/vim-ruby')
    call dein#add('tpope/vim-rails')
    " dir / dar
    call dein#add('nelstrom/vim-textobj-rubyblock')

    " 有bug, 和当前有冲突, 尚未解决, 不要打开
    " call dein#add('tpope/vim-endwise')
endif

if count(g:bundle_groups, 'javascript')
  " javascript
  " 注意: syntax这个插件要放前面
  call dein#add('othree/yajs.vim') | call dein#add('pangloss/vim-javascript')
  call dein#add('polpo/vim-html-js-indent')
  " call dein#add('jelera/vim-javascript-syntax') | call dein#add('pangloss/vim-javascript')

  " TODO: jquery? for, remove or keep
  call dein#add('othree/javascript-libraries-syntax.vim')
  let g:used_javascript_libs = 'jquery,underscore,vue,react'

  " js 代码格式化
  call dein#add('sbdchd/neoformat')

  " for javascript 自动补全, 配合YCM, 需要安装全局环境的（非nvm中) node.js&npm
  " 安装完成后还需要在 bundle/tern_for_vim 下执行 npm install 安装依赖
  " see https://github.com/marijnh/tern_for_vim
  call dein#add('ternjs/tern_for_vim')
  call dein#add('carlitux/deoplete-ternjs')
endif


if count(g:bundle_groups, 'coffeescript')
    call dein#add('kchmck/vim-coffee-script')
endif

if count(g:bundle_groups, 'json')
    " json
    call dein#add('elzr/vim-json'), {'for': 'json'}
endif

if count(g:bundle_groups, 'css')
    " css
    " not work in iterm2 which termianl selection is not xterm-256, and it slow
    " call dein#add('ap/vim-css-color')

    " 这个有坑, see issue https://github.com/wklken/k-vim/issues/49
    " call dein#add('gorodinskiy/vim-coloresque')
endif

if count(g:bundle_groups, 'less')
    " ###### vim.less : less 自动更新##########
    " call dein#add('groenewege/vim-less')
    " autocmd BufWritePost *.less :!lessc % > %:p:r.css
endif

if count(g:bundle_groups, 'html')
    " ###### emmet HTML complete #########
    " call dein#add("mattn/emmet-vim")
endif

if count(g:bundle_groups, 'nginx')
    " call dein#add('evanmiller/nginx-vim-syntax')
endif


" this is just for beta version
if count(g:bundle_groups, 'beta')
    " indent
    call dein#add('nathanaelkane/vim-indent-guides')
    " <leader>ig to trigger
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black

endif

  " You can specify revision/branch/tag.
  call dein#add('Shougo/deol.nvim', { 'rev': 'a1b5108fd' })

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
"if dein#check_install()
"  call dein#install()
"endif

"End dein Scripts-------------------------

" ################### 基础 ######################

" --------- 自动补全
let g:deoplete#enable_at_startup = 1

" deoplete触发补全时使用的命令
" 这里对应js，其它语言另给一个key
let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [
  \ 'tern#Complete',
  \ 'jspc#omni'
\]

set completeopt=longest,menuone,preview
let g:deoplete#sources = {}
let g:deoplete#sources['javascript.jsx'] = ['file', 'ultisnips', 'ternjs', 'buffer']
let g:tern#command = ['tern']
let g:tern#arguments = ['--persistent']

" 使用supertab来处理snippet和自动补全之间表现的不同
autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
let g:UltiSnipsExpandTrigger="<C-j>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

let g:deoplete#sources#ternjs#types = 1
let g:deoplete#sources#ternjs#depths = 1
let g:deoplete#sources#ternjs#docs = 1

let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue',
                \ ]

"  ---------------

" neomake 语法检测
" When writing a buffer.
call neomake#configure#automake('w')
" When writing a buffer, and on normal mode changes (after 750ms).
call neomake#configure#automake('nw', 750)
" When reading a buffer (after 1s), and when writing.
call neomake#configure#automake('rw', 1000)

" let g:neomake_javascript_enabled_makers = ['eslint_d']
" let g:neomake_javascript_enabled_makers = ['eslint', 'jshint']
" let g:neomake_javascript_enabled_makers = ['eslint']

" you can set your enabled makers globally (like below) or on the buffer level as part of an autocmd - see Neomake docs for details
" let g:neomake_javascript_enabled_makers = ['eslint']
" let g:neomake_javascript_enabled_makers = ['standard']
" when switching/opening a JS buffer, set neomake's eslint path, and enable it as a maker
" au BufEnter *.js let b:neomake_javascript_eslint_exe = nrun#Which('eslint_d')

let g:neomake_logfile = '/tmp/neomake.log'
" if findfile('.eslintrc', '.;') ==# ''
  let g:neomake_javascript_enabled_makers = ['eslint']
" else
  " let g:neomake_javascript_enabled_makers = ['jshint']
" endif
" 这一个选项用来debug neomake
" let g:neomake_verbose = 3
" let g:neomake_list_height = 2
" let g:neomake_open_list = 2
let g:neomake_javascript_eslint_exe = '/usr/local/bin/eslint_d'
" let g:neomake_javascript_enabled_makers = ['eslint', 'jshint']
autocmd! BufWritePost *.js silent! Neomake


" autocmd! FileType javascript, BufWritePost * Neomake

let g:neomake_warning_sign = {
  \ 'text': '>',
  \ 'texthl': 'WarningMsg',
  \ }

let g:neomake_error_sign = {
  \ 'text': '>>',
  \ 'texthl': 'Statement',
  \ }

" TODO: 高亮错误位置，在当前配色下不好用，查不出啥办法，先关掉
let g:neomake_highlight_columns = 0

" hi SignColumn cterm=underline ctermfg=81 ctermbg=236
" hi! SignColumn cterm=underline ctermfg=81 ctermbg=236
" hi LineNr cterm=underline ctermfg=81 ctermbg=236
" let ttt = neomake#utils#GetHighlight('SignColumn', 'bg')
" echom(ttt)

augroup my_neomake_signs
  au!
  autocmd ColorScheme *
        \ hi NeomakeErrorSign ctermfg=white |
        \ hi NeomakeWarningSign ctermfg=yellow
augroup END


" syntastic {{{
" dependence
" 1. shellcheck `brew install shellcheck` https://github.com/koalaman/shellcheck

" let g:syntastic_error_symbol='>>'
" let g:syntastic_warning_symbol='>'
" let g:syntastic_style_error_symbol = '†'
" let g:syntastic_style_warning_symbol = '∆'
" let g:syntastic_check_on_open=0
" let g:syntastic_check_on_wq=1
" let g:syntastic_enable_highlighting=1

" checkers
" 最轻量
" let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes
" 中等
" error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
" let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_pep8_args='--ignore=E501,E225,E124,E712'
" 重量级, 但是足够强大, 定制完成后相当个性化
" pylint codes: http://pylint-messages.wikidot.com/all-codes
" let g:syntastic_python_checkers=['pyflakes', 'pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_pylint_args='--disable=C0111,R0903,C0301'

" if js
 " let g:syntastic_javascript_checkers = ['jsl', 'jshint']
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exec = '/usr/local/bin/eslint'
" let g:syntastic_javascript_jscs_exec = '/usr/local/bin/jscs'
" let g:syntastic_html_checkers=['tidy', 'jshint']


" to see error location list
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_enable_signs = 1
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_auto_jump = 0
" let g:syntastic_loc_list_height = 5

" function! ToggleErrors()
    " let old_last_winnr = winnr('$')
    " lclose
    " if old_last_winnr == winnr('$')
        " " Nothing was closed, open syntastic_error location panel
        " Errors
    " endif
" endfunction
" nnoremap <Leader>s :call ToggleErrors()<cr>

" ,en ,ep to jump between errors
function! <SID>LocationPrevious()
    try
        lprev
    catch /^Vim\%((\a\+)\)\=:E553/
        llast
    endtry
endfunction

function! <SID>LocationNext()
    try
        lnext
    catch /^Vim\%((\a\+)\)\=:E553/
        lfirst
    endtry
endfunction

nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>
nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
nmap <silent> <Leader>ep    <Plug>LocationPrevious
nmap <silent> <Leader>en    <Plug>LocationNext

" 修改高亮的背景色, 适应主题
" highlight SyntasticErrorSign guifg=white guibg=black

" 禁止插件检查java
" thanks to @marsqing, see https://github.com/wklken/k-vim/issues/164
" let g:syntastic_mode_map = {'mode': 'active', 'passive_filetypes': ['java'] }
" }}}


" ################### 自动补全 ###################

" ultisnips {{{
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories  = [$HOME.'/.vim/UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
" 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
" 进入对应filetype的snippets进行编辑
map <leader>us :UltiSnipsEdit<CR>

" ctrl+j/k 进行选择
func! g:JInYCM()
    if pumvisible()
        return "\<C-n>"
    else
        return "\<c-j>"
    endif
endfunction

func! g:KInYCM()
    if pumvisible()
        return "\<C-p>"
    else
        return "\<c-k>"
    endif
endfunction
inoremap <c-j> <c-r>=g:JInYCM()<cr>
au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
" }}}


" delimitMate {{{
" for python docstring ",优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']
au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
" 关闭某些类型文件的自动补全
"au FileType mail let b:delimitMate_autoclose = 0
" }}}


" closetag {{{
let g:closetag_html_style=1
" }}}

"add---------
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
                return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

function! g:UltiSnips_Reverse()
    call UltiSnips#JumpBackwards()
    if g:ulti_jump_backwards_res == 0
        return "\<C-P>"
    endif

    return ""
endfunction


if !exists("g:UltiSnipsJumpForwardTrigger")
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
"--------------

" ################### 快速编码 ###################

" nerdcommenter {{{
let g:NERDSpaceDelims=1
"TODO: for python, one space
" }}}

" trailingwhitespace {{{
map <leader><space> :FixWhitespace<cr>
" }}}

" easyalign {{{
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" }}}

" ################### 快速移动 ###################

" easymotion {{{
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}


" quickscope {{{
let g:qs_highlight_on_keys = ['t', 'T']
" macvim/gvim会有问题, 暂时注解
" let g:qs_first_occurrence_highlight_color = '#afff5f' " gui vim
" let g:qs_first_occurrence_highlight_color = 155       " terminal vim
" let g:qs_second_occurrence_highlight_color = '#5fffff'  " gui vim
" let g:qs_second_occurrence_highlight_color = 81         " terminal vim
" }}}

" ################### 快速选中 ###################

" expandregion {{{
" map + <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
" Extend the global default
call expand_region#custom_text_objects({
            \ 'a]' :1,
            \ 'ab' :1,
            \ 'aB' :1,
            \ 'ii' :0,
            \ 'ai' :0,
            \ })
" }}}

" multiplecursors {{{
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" }}}

" ################### 功能相关 ###################

" ctrlp ctrlpfunky{{{
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/](\.(git|hg|svn|rvm))|(node_modules|dist|third_party|bin)',
            \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc|png|gif|jpg|jpeg|lock)$',
            \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
" 如果安装了ag, 使用ag
" if executable('ag')
" " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
" let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" " ag is fast enough that CtrlP doesn't need to cache
" let g:ctrlp_use_caching = 0
" endif
" 如果安装了ripgrep
if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif

" ctrlpfunky
" ctrlp插件1 - 不用ctag进行函数快速跳转
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1

let g:ctrlp_extensions = ['funky']
" }}}


" ctrlsf {{{
nmap \ <Plug>CtrlSFCwordPath<CR>
" let g:ctrlsf_position = 'below'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
            \ "open"  : "<Space>",
            \ "openb" : "O",
            \ "tab"   : "t",
            \ "tabb"  : "T",
            \ "prevw" : "p",
            \ "quit"  : "q",
            \ "next"  : "<C-J>",
            \ "prev"  : "<C-K>",
            \ "pquit" : "q",
            \ }
" }}}

" git.  git操作还是习惯命令行,vim里面处理简单diff编辑操作

" fugitive {{{
" :Gdiff  :Gstatus :Gvsplit
nnoremap <leader>ge :Gdiff<CR>
" not ready to open
" <leader>gb maps to :Gblame<CR>
" <leader>gs maps to :Gstatus<CR>
" <leader>gd maps to :Gdiff<CR>  和现有冲突
" <leader>gl maps to :Glog<CR>
" <leader>gc maps to :Gcommit<CR>
" <leader>gp maps to :Git push<CR>
" }}}

" gitgutter {{{
" 同git diff,实时展示文件中修改的行
" 只是不喜欢除了行号多一列, 默认关闭,gs时打开
let g:gitgutter_map_keys = 0
let g:gitgutter_enabled = 0
let g:gitgutter_highlight_lines = 1
nnoremap <leader>gs :GitGutterToggle<CR>
" }}}

" gundo {{{
noremap <leader>h :GundoToggle<CR>
" }}}

" ################### 显示增强 ###################

" airline {{{
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
" 是否打开tabline
" let g:airline#extensions#tabline#enabled = 1
" }}}



" rainbow_parentheses {{{
" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" }}}


" ################### 显示增强-主题 ###################"

" solarized {{{
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
" let g:solarized_termcolors=256
" }}}

" molokai {{{
" monokai原始背景色
let g:molokai_original = 1
let g:rehash256 = 1
" }}}

" ################### 快速导航 ###################

" nerdtree nerdtreetabs {{{
map <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'


" nerdtreetabs
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=0
" 是否自动开启nerdtree
" thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
let g:nerdtree_tabs_open_on_console_startup=0
let g:nerdtree_tabs_open_on_gui_startup=0
" }}}


" Vim Workspace Controller
" ctrlspace {{{
let g:airline_exclude_preview = 1
hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8
" }}}


" 标签导航
" tagbar {{{
" nmap <F9> :TagbarToggle<CR>
" let g:tagbar_autofocus = 1
" " let g:tagbar_autoshowtag = 1
" " let g:tagbar_show_visibility = 1
" " for ruby
" let g:tagbar_type_ruby = {
            " \ 'kinds' : [
            " \ 'm:modules',
            " \ 'c:classes',
            " \ 'd:describes',
            " \ 'C:contexts',
            " \ 'f:methods',
            " \ 'F:singleton methods'
            " \ ]
            " \ }

" go语言的tagbar配置
" 1. install gotags 'go get -u github.com/jstemmer/gotags'
" 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
" for gotags. work with tagbar
" let g:tagbar_type_go = {
            " \ 'ctagstype' : 'go',
            " \ 'kinds'     : [
            " \ 'p:package',
            " \ 'i:imports:1',
            " \ 'c:constants',
            " \ 'v:variables',
            " \ 't:types',
            " \ 'n:interfaces',
            " \ 'w:fields',
            " \ 'e:embedded',
            " \ 'm:methods',
            " \ 'r:constructor',
            " \ 'f:functions'
            " \ ],
            " \ 'sro' : '.',
            " \ 'kind2scope' : {
            " \ 't' : 'ctype',
            " \ 'n' : 'ntype'
            " \ },
            " \ 'scope2kind' : {
            " \ 'ctype' : 't',
            " \ 'ntype' : 'n'
            " \ },
            " \ 'ctagsbin'  : 'gotags',
            " \ 'ctagsargs' : '-sort -silent'
            " \ }
" }}}


" ################### 语言相关 ###################

" quickrun {{{
let g:quickrun_config = {
            \   "_" : {
            \       "outputter" : "message",
            \   },
            \}

let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
map <F10> :QuickRun<CR>
" }}}


" pythonsyntax {{{
let python_highlight_all = 1
" }}}


" vimgo {{{
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

let g:go_fmt_fail_silently = 1
" let g:go_fmt_command = "goimports"
" let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
" }}}

" markdown {{{
let g:vim_markdown_folding_disabled=1
" }}}


" javascript {{{
" pangloss/vim-javascript
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
" }}}

" json {{{
let g:vim_json_syntax_conceal = 0
" }}}

" css {{{
" }}}

" nginx {{{
" }}}

map <F7> :Ack -i

"fzf
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
" command! -bang -nargs=* Rgg call fzf#vim#grep('rg %s --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
" set grepprg=rg\ --vimgrep

map <tab> :Buffers<CR>
" ####### temp #######

" beta {{{
" python code format
" format all file
autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr>
" format select block
" autocmd FileType python vnoremap <leader>y :!yapf<Cr>

" Plug 'mindriot101/vim-yapf'
" scriptencoding utf-8
" let g:yapf_style = "google"
" let g:yapf_style = "pep8"
" setenv PYTHONIOENCODING UTF-8
" nnoremap <leader>y :call Yapf()<cr>
" }}}

" Plug 'Cyperwu/CommentReader'

" jsdoc自动写文档
nmap <silent> <leader>do <Plug>(jsdoc)

let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_additional_descriptions = 1
let g:jsdoc_enable_es6 = 1
let g:jsdoc_user_defined_tags = {
      \ '@author': 'Cyper',
      \ '@date': strftime('%Y-%m-%d'),
      \}

" ######### tern_for_vim ########
" 重命名变量
nmap R :TernRename<cr>
" ######### tpope/vim-eunuch ########
" 重命名文件
nmap <leader>R :call RenameFile()<cr>
function! RenameFile()
  let file_name = expand('%:t')
  exe 'Rename  'input('Rename ', file_name)
endfunction

" LeaderF
noremap <leader>t :LeaderfFunction!<cr>
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_PreviewResult = {'Function':0, 'Colorscheme':1}

let g:Lf_NormalMap = {
	\ "File":   [["<ESC>", ':exec g:Lf_py "fileExplManager.quit()"<CR>']],
	\ "Buffer": [["<ESC>", ':exec g:Lf_py "bufExplManager.quit()"<CR>']],
	\ "Mru":    [["<ESC>", ':exec g:Lf_py "mruExplManager.quit()"<CR>']],
	\ "Tag":    [["<ESC>", ':exec g:Lf_py "tagExplManager.quit()"<CR>']],
	\ "Function":    [["<ESC>", ':exec g:Lf_py "functionExplManager.quit()"<CR>']],
	\ "Colorscheme":    [["<ESC>", ':exec g:Lf_py "colorschemeExplManager.quit()"<CR>']],
	\ }


" neoformat
" 对应js使用prettier
let g:neoformat_enabled_javascript = ['prettier']
" 保存文件前自动格式化
augroup fmt
  autocmd!
  autocmd BufWritePre * try | undojoin | Neoformat | catch /^Vim\%((\a\+)\)\=:E790/ | endtry
augroup END

" FastFold
nmap zuz <Plug>(FastFoldUpdate)
let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']

let g:markdown_folding = 1
let g:tex_fold_enabled = 1
let g:vimsyn_folding = 'af'
let g:xml_syntax_folding = 1
let g:javaScript_fold = 1
let g:sh_fold_enabled= 7
let g:ruby_fold = 1
let g:perl_fold = 1
let g:perl_fold_blocks = 1
let g:r_syntax_folding = 1
let g:rust_fold = 1
let g:php_folding = 1

"------------------------------------------- end of configs --------------------------------------------
